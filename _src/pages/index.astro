---
import Layout from "../layouts/Layout.astro";

import Hero from "../components/Index/Hero.vue";
import HomeSlider from "../components/Index/HomeCarousel.vue";
import ShowAllProducts from "../components/Products/ShowAllProducts.vue";
import ShowAllCategories from "../components/Category/ShowAllCategories.vue";
import HtmlBlockList from "../components/Index/LuyaHtmlBlockList.vue";
import { getAllProducts } from "../graphql/queries/getAllProducts";
//import { getAllCategories } from "../graphql/queries/getAllCategories";
//const allProducts = await getAllProducts();


//const categories = await getAllCategories();
import FigureDescription from "../components/FigureDesctiption.astro";
import type { CartItemDisplayInfo } from '../stores/cartStore';
import AddToCartForm from '../components/Cart/AddToCartForm.vue';
const item: CartItemDisplayInfo = {
  id: "astronaut-figurine",
  name: "Astronaut Figurine",
  imageSrc: "/images/chococake.jpg",
};


//import '../assets/scss/reset.scss'
//import '../assets/scss/base.scss'
//import '../assets/scss/base.scss'
//import '../assets/scss/base.scss'

---

<Layout title="Index">
  <main>
   
    <!-- <Hero />  -->
    <HomeSlider client:load />
    <h1 class="text-center text-3xl font-bold p-4">Categories</h1>
    <!--   <ShowAllCategories categories={categories} client:load />  -->
    <!--  <ShowAllProducts allProducts={allProducts} />  -->
    <HtmlBlockList client:load />
    <div class="product-layout">
			<div>
				<FigureDescription />
			<!--	<AddToCartForm item={item} client:load>
					<button type="submit">Add to cart</button>
				</AddToCartForm>  -->
			</div>
			<img src={item.imageSrc} alt={item.name} />
		</div>
    <section id="banner">
      <h2>Up to <span>30% Off</span> on All Cakes &amp; Decoratives</h2>
      <button class="button-normal">EXPLORE MORE</button>
    </section>
    <form id="example-form" hx-post="/test">
      <input name="example"
             title="example"
             placeholder="Type"
             onkeyup="this.setCustomValidity('') // reset the validation on keyup"
             hx-on:htmx:validation:validate="if(this.value != \'foo\') {
                      this.setCustomValidity('Please enter the value foo')
                      htmx.find(\'#foo-form\').reportValidity()
                  }"> </form>
                  <button
                  hx-get="http://localhost:3030/api/page?id=4&slug=8"
                  hx-target="#joke-container"
                >
                  Make me laugh!
                </button>
                <label>Keyword:
                  <input
                    type="text"
                    placeholder="Enter a keyword..."
                    hx-trigger="keyup"
                   // hx-get="https://v2.jokeapi.dev/joke/Any?format=txt&safe-mode"
                   hx-get="https://dicr.org/proxer/api/load"
                    hx-target="#joke-container"
                    hx-indicator=".loader"
                    name="contains"
                  />
                </label>
                <span class="loader htmx-indicator"></span>
               
                <button 
  hx-get="https://v2.jokeapi.dev/joke/Any?format=txt&safe-mode" 
  hx-swap="innerHTML transition:true" 
  hx-target="#joke-container"
>
  Load new joke
</button>

<div id="joke-container" class="bounce-it">
  <p>Initial joke content goes here...</p>
</div>
<form hx-post="http://localhost:3030/contact">
  <div hx-target="this" hx-swap="outerHTML">
    <label>Email:
      <input type="email" name="email" required hx-post="http://localhost:3030/contact/email">
    </label>
  </div>
  <button>Submit</button>
</form>    
  </main>
</Layout>

<style>
  #app {
    font-family: Avenir, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
    margin-top: 60px;
  }
  .loader {
  width: 48px;
  height: 48px;
  border: 2px solid #FFF;
  border-radius: 50%;
  display: inline-block;
  position: relative;
  box-sizing: border-box;
  animation: rotation 1s linear infinite;
}
.loader::after {
  content: '';  
  box-sizing: border-box;
  position: absolute;
  left: 50%;
  top: 0;
  background: #FF3D00;
  width: 3px;
  height: 24px;
  transform: translateX(-50%);
}
.fadeIn {
  animation: fadeIn 2.5s;
}

@keyframes fadeIn {
  0% {opacity: 0;}
  100% {opacity: 1;}
}
@keyframes bounce-in {
  0% { transform: scale(0.1); opacity: 0; }
  60% { transform: scale(1.2); opacity: 1; }
  100% { transform: scale(1); }
}

@keyframes bounce-out {
  0% { transform: scale(1); }
  45% { transform: scale(1.3); opacity: 1; }
  100% { transform: scale(0); opacity: 0; }
}

.bounce-it {
  view-transition-name: bounce-it;
}

::view-transition-old(bounce-it) {
  animation: 600ms cubic-bezier(0.4, 0, 0.2, 1) both bounce-out;
}

::view-transition-new(bounce-it) {
  animation: 600ms cubic-bezier(0.4, 0, 0.2, 1) both bounce-in;
}
@keyframes rotation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
} 
  </style>