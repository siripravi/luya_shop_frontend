---
import Layout from "../layouts/Layout.astro";
import ShowAllProducts from "../components/Products/ShowAllProducts.vue";
import ProductImage from "../components/Products/ProductImage.vue";
import ProductPrice from "../components/Products/ProductPrice.vue";
//import { getAllProducts } from "../graphql/queries/getAllProducts";
//const allProducts = await getAllProducts();
import gql from "graphql-tag";
import { computed } from "vue";
import client from "../lib/apollo-client";
const { PUBLIC_PLACEHOLDER_SMALL_IMAGE_URL } = import.meta.env;
/*
const {
  categoryId: { type: String, required: false },
  categorySlug: { type: String, required: false },
} = Astro.props;
*/
const { categoryId, categorySlug } = Astro.props;
const productVariables = { limit: 99 };

const { data: allProducts } = await client.query({
  query: gql`
    {
      products(first: 24) {
        nodes {
          databaseId
          name
          onSale
          slug
          image {
            sourceUrl
          }
          ... on SimpleProduct {
            databaseId
            price
            regularPrice
            salePrice
          }
          ... on VariableProduct {
            databaseId
            price
            regularPrice
            salePrice
            variations {
              nodes {
                price
                regularPrice
                salePrice
              }
            }
          }
        }
      }
    }
  `,
  variables: productVariables,
});

//console.log(allProducts.products);
const categoryVariables = { id: "dGVybToyMA==" };
const { data: allCategoryProducts } = await client.query({
  query: gql`
    query ProductsFromCategory($id: ID!) {
      productCategory(id: $id, idType: ID) {
        id
        name
        products(first: 50) {
          nodes {
            id
            databaseId
            onSale
            averageRating
            slug
            description
            image {
              id
              uri
              title
              srcSet
              sourceUrl
            }
            name
            ... on SimpleProduct {
              salePrice
              regularPrice
              onSale
              price
              id
            }
            ... on VariableProduct {
              salePrice
              regularPrice
              onSale
              price
              id
            }
            ... on ExternalProduct {
              price
              id
              externalUrl
            }
            ... on GroupProduct {
              products {
                nodes {
                  ... on SimpleProduct {
                    id
                    price
                  }
                }
              }
              id
            }
          }
        }
      }
    }
  `,
  variables: categoryVariables,
});

//console.log(allCategoryProducts.productCategory);

const products = 
  //  allCategoryProducts.productCategory?.products?.nodes ||
    allProducts.products?.nodes ||
    []
  ;
//console.log(products);
---

<Layout title="Products">
  <section class="mt-100"> 
    <h1 class="text-3xl text-center font-bold p-6">Products page</h1>
    <ShowAllProducts allProducts={products}  client:load/> 
    <p>The remark and rehype pipelines only run when your content is rendered, which explains why remarkPluginFrontmatter is only available after you call render() on your content entry. In contrast, getCollection() and getEntry() cannot return these values directly because they do not render your content.</p>
  </section>
</Layout>
